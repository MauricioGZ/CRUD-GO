// Code generated by mockery v2.45.0. DO NOT EDIT.

package repository

import (
	context "context"

	entity "github.com/MauricioGZ/CRUD-GO/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// DeleteAddressByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeleteAddressByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddressByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockRepository) DeleteUserByEmail(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddressesByUserId provides a mock function with given fields: ctx, userId
func (_m *MockRepository) GetAddressesByUserId(ctx context.Context, userId int64) ([]entity.Address, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressesByUserId")
	}

	var r0 []entity.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.Address, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.Address); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockRepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAddress provides a mock function with given fields: ctx, userId, addressType, address, city, state, country, zipCode
func (_m *MockRepository) SaveAddress(ctx context.Context, userId int64, addressType string, address string, city string, state string, country string, zipCode string) error {
	ret := _m.Called(ctx, userId, addressType, address, city, state, country, zipCode)

	if len(ret) == 0 {
		panic("no return value specified for SaveAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, string, string, string, string) error); ok {
		r0 = rf(ctx, userId, addressType, address, city, state, country, zipCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, firstName, lastName, email, password
func (_m *MockRepository) SaveUser(ctx context.Context, firstName string, lastName string, email string, password string) error {
	ret := _m.Called(ctx, firstName, lastName, email, password)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, firstName, lastName, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAddressByID provides a mock function with given fields: ctx, id, addressType, address, city, state, country, zipCode
func (_m *MockRepository) UpdateAddressByID(ctx context.Context, id int64, addressType string, address string, city string, state string, country string, zipCode string) error {
	ret := _m.Called(ctx, id, addressType, address, city, state, country, zipCode)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAddressByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, string, string, string, string) error); ok {
		r0 = rf(ctx, id, addressType, address, city, state, country, zipCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
